#include "mbed.h"
 //sensors
DigitalOut S1(PTD1);
DigitalOut S2(PTD3);
DigitalOut S3(PTD2);
DigitalOut S4(PTD0);
DigitalOut S5(PTD5);
DigitalOut S6(PTA13);
    //Right
PwmOut PwmR(PTA12);
DigitalOut Rforward(PTA2);
DigitalOut Rbackward(PTD4);
    //Left
PwmOut PwmL(PTA1);
DigitalOut Lforward(PTA5);
DigitalOut Lbackward(PTA4);

void controlLeft(float dutycycle, bool direction) {
    if (PwmL != dutycycle){
       PwmL = dutycycle;
   }
    if (direction == 1){
        Lforward = 1;
        Lbackward =0;
    }
    else{
        Lforward = 0;
        Lbackward = 1;
    }
}    
void controlRight(float dutycycle, bool direction) {
    if (PwmR != dutycycle){
       PwmR = dutycycle;
    }
    if (direction == 1){
        Rforward = 1;
        Rbackward =0;
    }
    else{
        Rforward = 0;
       Rbackward = 1;
    }
}    

void on_line (){
  controlLeft(0.5,1);
  controlRight(0.5,1);
}

void turn_left (){
  controlLeft(0.2,0);
  controlRight(0.8,1);
}

void turn_right(){
   controlLeft(0.8,1);
  controlRight(0.2,0);
}

void find_line(){
  controlLeft(0.3,0);
  controlRight(0.3,0);
}

void corner_L(){
  controlLeft(0.3,0);
  controlRight(0.3,0);
  wait_us(1000);
  controlLeft(0.3,0);
  controlRight(0.8,1);
}

void corner_R(){
  controlLeft(0.3,0);
  controlRight(0.3,0);
  wait_us(1000);
  controlLeft(0.8,1);
  controlRight(0.3,0);
}

int main(){
    int cases;
if (S1==0 && S2==0 && S3==0 && S4==0 && S5==0 && S6==0 ){
    cases=1;
    return cases;
}else if (S1==0 && S2==0 && S3==1 && S4==1 && S5==0 && S6==0){
    cases=2;
    return cases;
}else if (S1==0 && S2==1 && S3==1 && S4==0 && S5==0 && S6==0){
    cases=3;
    return cases;
}else if (S1==0 && S2==0 && S3==0 && S4==1 && S5==1 && S6==0){
    cases=4;
    return cases;
}else if (S1==1 && S2==1 && S3==1 && S4==0 && S5==0 && S6==0){
    cases=5;
    return cases;
}else if (S1==0 && S2==0 && S3==0 && S4==1 && S5==1 && S6==1){
    cases=6;
    return cases;
}
switch(cases){
    case 1:
    find_line();
    break;

    case 2:
    on_line();
    break;

    case 3:
    turn_left();
    break;

    case 4:
    turn_right();
    break;

    case 5:
    corner_L();
    break;

    case 6:
    corner_R();
    break;

}


}
